//
// UsersAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class UsersAPI {

    /**
     * enum for parameter sort
     */
    public enum Sort_getUsers: String, CaseIterable {
        case nameAsc = "name_asc"
        case nameDesc = "name_desc"
        case emailAsc = "email_asc"
        case emailDesc = "email_desc"
    }

    /**
     Returns a paginated list of end-user records for a business
     
     - parameter sort: (query) Describes the field and order to sort the result by (optional)
     - parameter pageSize: (query) The number of items to return (optional)
     - parameter userId: (query) The id of the user to filter by (optional)
     - parameter nextToken: (query) A string to get the next page of results if there are more results (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getUsers(sort: Sort_getUsers? = nil, pageSize: Int? = nil, userId: Int? = nil, nextToken: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Users?, _ error: Error?) -> Void)) -> RequestTask {
        return getUsersWithRequestBuilder(sort: sort, pageSize: pageSize, userId: userId, nextToken: nextToken).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Returns a paginated list of end-user records for a business
     - GET /users
     - The returned list can be sorted by full name or email address in ascending or descending order. The number of records to return at a time can also be controlled using the page_size query string parameter.  
     - BASIC:
       - type: http
       - name: kindeBearerAuth
     - parameter sort: (query) Describes the field and order to sort the result by (optional)
     - parameter pageSize: (query) The number of items to return (optional)
     - parameter userId: (query) The id of the user to filter by (optional)
     - parameter nextToken: (query) A string to get the next page of results if there are more results (optional)
     - returns: RequestBuilder<Users> 
     */
    open class func getUsersWithRequestBuilder(sort: Sort_getUsers? = nil, pageSize: Int? = nil, userId: Int? = nil, nextToken: String? = nil) -> RequestBuilder<Users> {
        let localVariablePath = "/users"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "sort": sort?.encodeToJSON(),
            "page_size": pageSize?.encodeToJSON(),
            "user_id": userId?.encodeToJSON(),
            "next_token": nextToken?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Users>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }
}
